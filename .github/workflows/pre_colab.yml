name: Cache Python Dependencies

on:
  workflow_dispatch:

jobs:
  Linux:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10.12"]

    steps:
      - uses: actions/checkout@v3

      - name: Free up space on runner
        run: |
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /opt/ghc
          sudo rm -rf "/usr/local/share/boost"
          sudo rm -rf "$AGENT_TOOLSDIRECTORY"

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Read version from config.json
        id: get-version
        run: |
          version=$(jq -r '.version' assets/config.json)
          echo "version=$version" >> $GITHUB_OUTPUT

      - name: Install uv and create virtual environment
        run: |
          sudo apt-get install -y pigz
          sudo apt-get install -y pv
          sudo apt-get install -y ffmpeg
          pip install uv huggingface_hub
          uv venv .venv --python 3.10.12
          uv pip install -r requirements.txt
          uv pip uninstall torch torchvision torchaudio
          . .venv/bin/activate
          python -m ensurepip
          python -m pip install "pip<24.1"
          python -m pip install torch==2.1.1 torchvision==0.16.1 torchaudio==2.1.1 --index-url https://download.pytorch.org/whl/cu121
          python core.py "prerequisites" --models "True" --pretraineds_v1 "False" --pretraineds_v2 "True" --exe "False"
          deactivate
      
      - name: Clean up unnecessary files
        run: |
          rm -f LICENSE run-tensorboard.bat run-install.bat run-applio.bat run-install.sh requirements.txt .gitignore
          rm -rf .github
          
      - name: Modify pyvenv.cfg
        run: |
          sed -i 's/home = \/opt\/hostedtoolcache\/Python\/3\.10\.12\/x64\/bin/home = \/usr\/bin/' .venv/pyvenv.cfg

      - name: Create ZIP file
        run: |
          zip -9 -r Linux_ApplioV${{ steps.get-version.outputs.version }}.zip .

      - name: Upload Linux Compiled
        env:
          HF_TOKEN: ${{ secrets.HF_TOKEN }}
          version: ${{ steps.get-version.outputs.version }}
        run: |
          python -c "
          import os
          from huggingface_hub import login, upload_file
            
          token = os.getenv('HF_TOKEN')
          version = os.getenv('version')
          login(token)
          repo_id = 'vidalnt/nothing'
          repo_file_path = f'Linux_ApplioV{version}.zip'
            
          upload_file(
          commit_message=f'{version}',
          path_or_fileobj=repo_file_path,
          path_in_repo=f'Compiled/{repo_file_path}',
          repo_id=repo_id,
          token=token)
          "
      - name: Remove Compiled File
        run: |
          rm -f Linux_ApplioV${{ steps.get-version.outputs.version }}.zip
          
      - name: Install imjoy-elfinder
        run: |
          uv pip install https://github.com/Vidalnt/imjoy-elfinder.git

      - name: Modify pyvenv.cfg
        run: |
          sed -i 's/home = \/usr\/bin/home = \/opt\/conda\/bin/' .venv/pyvenv.cfg

      - name: Create TAR Env
        run: |
          tar --use-compress-program="pigz --best --recursive | pv" -cvf KaggleV2.tar.gz .venv

      - name: Upload Kaggle Env
        env:
          HF_TOKEN: ${{ secrets.HF_TOKEN }}
        run: |
          python -c "
          import os
          from huggingface_hub import login, upload_file
            
          token = os.getenv('HF_TOKEN')
          login(token)
          repo_id = 'vidalnt/nothing'
          repo_file_path = 'KaggleV2.tar.gz'
            
          upload_file(
          path_or_fileobj=repo_file_path,
          path_in_repo=f'Colab/{repo_file_path}',
          repo_id=repo_id,
          token=token)
          "