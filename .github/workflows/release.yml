name: Release

on:
  push:
    branches:
      - main
      - master

jobs:
  release:
    name: Release
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Set up Python
        uses: actions/setup-python@v4.7.1
        with:
          python-version: "3.8"

      - name: Check if there is a parent commit
        id: check-parent-commit
        run: |
          echo "::set-output name=sha::$(git rev-parse --verify --quiet HEAD^)"

      - name: Detect and tag new version
        id: check-version
        if: steps.check-parent-commit.outputs.sha
        uses: salsify/action-detect-and-tag-new-version@v2.0.3
        with:
          tag-template: '{VERSION}'
          version-command: |
            bash -o pipefail -c "cat ./assets/config.json | jq -r '.version'"

      - name: Create CHANGELOG.md
        run: |
          cd /home/runner/work/Applio/Applio
          cat > CHANGELOG.md << EOF
          ## Important Installation Guidelines

          ### Before You Install Applio
          Please review these essential instructions to ensure a smooth installation:

          - **File Location**: Place the Applio files in a dedicated folder on your C drive.
          - **Access Control**: Avoid placing Applio in folders that require elevated privileges.
          - **Administrator Rights**: Do not run the \`run-install.bat\` script with administrator privileges.
          - **Path Requirements**: Ensure the installation path is free of spaces or special characters.
          - **Security Settings**: Temporarily disable your antivirus and firewall to prevent any issues with missing dependencies during installation.

          ### Installation Steps
          1. **Download**: Get the .zip file from [this link](https://github.com/IAHispano/Applio/archive/refs/tags/${{ steps.check-version.outputs.tag }}.zip).
          2. **Run the Installer**: Extract the files and execute the \`run-install.bat\` script.
          3. **Start Applio**: Launch Applio by running the \`run-applio.bat\` script.

          ### Prefer a Simpler Installation?
          > [!TIP]
          > For the best experience, we highly recommend using the pre-compiled version. Compiling the code yourself may lead to instabilities.

          - **Download Compiled Version**: Get the executable from [this link](https://huggingface.co/IAHispano/Applio/tree/main/Compiled).
          - **Run Applio**: Double-click the downloaded \`.exe\` file, then open the \`run-applio.bat\` file.

          ## What's New in This Release
          - Enhanced extraction workflows for improved performance.
          - Fixed various critical bugs (and introduced a few new ones).

          **Full Changelog**: https://github.com/IAHispano/Applio/compare/${{ steps.check-version.outputs.previous-version }}...${{ steps.check-version.outputs.tag }}

          EOF

      - name: Get commit history and format as a list
        run: |
          previous_tag="${{ steps.check-version.outputs.previous-version }}"
          echo "Previous Tag: $previous_tag"
          commit_date=$(curl -s "https://api.github.com/repos/IAHispano/Applio/commits?sha=$previous_tag&per_page=1" \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            | jq -r '.[0].commit.committer.date')
          echo "Fetching commits since: $commit_date"
          curl -s "https://api.github.com/repos/IAHispano/Applio/commits?since=$commit_date&per_page=600" \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            | jq -r '.[] | .sha + " " + .commit.message' > commits.txt
          cat commits.txt

      - name: Summarize changelog with Groq API
        id: summarize-changelog
        run: |
          changelog=$(cat commits.txt)
          json_payload=$(jq -n \
            --arg content "$changelog" \
            '{
              messages: [
                {
                  role: "system",
                  content: "You will receive a commit history. Your task is to extract and present the top 10% most relevant changes as a concise list, each item preceded by a bullet point (-). Each entry should be as brief as possible, ideally 3 to 4 words, summarizing the key updates and enhancements. Ignore changes related to .yaml files, Git Keep, chore(format), and \"colab.\" Summarize commits like Update ___.py or Fix _____.py as \"Fixing Code Issues\" and include specific details in parentheses if applicable. For entries starting with \"Add,\" \"Fix,\" \"Improve,\" or \"Rework,\" ensure they are merged into a single entry, with specific details included in parentheses. After generating the list, thoroughly review it to identify and merge any similar entries, even if they differ slightly in wording. Ensure that all related changes are grouped together, providing a clear, concise summary. Each entry should start with an uppercase letter, and no additional commentary or text should be included."
                },
                {
                  role: "user",
                  content: $content
                }
              ],
              model: "llama-3.1-70b-versatile",
              temperature: 0.5,
              max_tokens: 1024,
              top_p: 1,
              stream: false,
              stop: null
            }')

          echo "json_payload: $json_payload"

          curl "https://api.groq.com/openai/v1/chat/completions" \
            -X POST \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer ${{ secrets.GROQ_API_KEY }}" \
            -d "$json_payload" \
            | jq -r '.choices[0].message.content' > summarized_changelog.txt

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Install gh-release
        run: |
          npm install https://github.com/Vidalnt/gh-release.git

      - name: Debug output
        run: |
          echo "Tag: ${{ steps.check-version.outputs.tag }}"
          echo "Changelog: $(cat summarized_changelog.txt)"
          echo "Repository: ${{ github.repository }}"

      - name: Create package.json 
        run: |
          cd /home/runner/work/Applio/Applio 
          echo '{}' > package.json
          jq \
            --arg version "${{ steps.check-version.outputs.tag }}" \
            --arg url "git+https://github.com/IAHispano/Applio.git" \
            '. + {version: $version, repository: {url: $url}}' \
            package.json > tmp.$$.json && mv tmp.$$.json package.json
          cat package.json

      - name: Publish release using gh-release
        run: |
          cd /home/runner/work/Applio/Applio && \
          tag_name="${{ steps.check-version.outputs.tag }}"
          changelog=$(cat summarized_changelog.txt)
          GH_RELEASE_GITHUB_API_TOKEN=${{ secrets.GITHUB_TOKEN }} npx gh-release \
            -t "${tag_name}" \
            -n "Release ${tag_name}" \
            -c "main" \
            -b "üöÄ Exciting News! Upgrade to the latest and greatest version of Applio, ${tag_name}, now available for download!\n\n### Choose your preferred option:\n- üöÄ Release: [Download Now](https://github.com/${{ github.repository }}/releases/tag/${tag_name})\n- üì¶ Compiled (Just double click it): [.exe](https://huggingface.co/${{ github.repository }}/resolve/main/Compiled/ApplioV${tag_name}.exe) / [.zip](https://huggingface.co/${{ github.repository }}/resolve/main/Compiled/ApplioV${tag_name}.zip?download=true)\n\n### Applio Changelog Highlights:\n${changelog}\n\nWhat features are you hoping to see in our upcoming updates? üîç Stay tuned for more exciting improvements!" \
            -o "Vidalnt" \
            -r "Applio" \
            -w /home/runner/work/Applio/Applio \
            -y
        env:
          GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"

      - name: Trigger Pre-Compiled and Upload workflow
        uses: actions/github-script@v6
        with:
          script: |
            const octokit = github.getOctokit(process.env.GITHUB_TOKEN);
            await octokit.rest.actions.createWorkflowDispatch({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: 'pre_compiled.yml',
              ref: context.ref,
            });
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
