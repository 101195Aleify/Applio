name: Release

on:
  push:
    branches:
      - main
      - master

jobs:
  release:
    name: Release
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Set up Python
        uses: actions/setup-python@v4.7.1
        with:
          python-version: "3.8"

      - name: Check if there is a parent commit
        id: check-parent-commit
        run: |
          echo "::set-output name=sha::$(git rev-parse --verify --quiet HEAD^)"

      - name: Detect and tag new version
        id: check-version
        if: steps.check-parent-commit.outputs.sha
        uses: salsify/action-detect-and-tag-new-version@v2.0.3
        with:
          version-command: |
            bash -o pipefail -c "cat ./assets/config.json | jq -r '.version'"

      - name: Generate commit history
        id: generate-commits
        run: |
          tag="${{ steps.check-version.outputs.tag }}"
          echo "Tag: $tag"
          if [ -z "$tag" ]; then
            echo "No tag found. Exiting."
            tag="3.2.4"
          fi
          echo $(git log 3.2.4..HEAD --oneline)
          git log "$tag".."HEAD" --oneline > commits.txt
          echo "H"
          cat commits.txt
        shell: bash

      - name: Summarize changelog with Groq API
        id: summarize-changelog
        run: |
          changelog=$(cat commits.txt)
          json_payload=$(jq -n \
            --arg content "$changelog" \
            '{
              messages: [
                {
                  role: "system",
                  content: "You will receive a commit history. Your task is to extract and present the top 10% most relevant changes as a concise list, each item preceded by a bullet point (-). Each entry should be as brief as possible, ideally 3 to 4 words, summarizing the key updates and enhancements. Ignore changes related to .yaml files, Git Keep, chore(format), and \"colab.\" Summarize commits like Update ___.py or Fix _____.py as \"Fixing Code Issues\" and include specific details in parentheses if applicable. Merge entries starting with \"Add,\" \"Fix,\" \"Improve,\" or \"Rework\" into a single update with specific details in parentheses. After generating the list, check for duplicates and merge any similar entries. Ensure each entry is distinct, meaningful, and starts with an uppercase letter. Do not include additional commentary or text."
                },
                {
                  role: "user",
                  content: $content
                }
              ],
              model: "llama-3.1-70b-versatile",
              temperature: 0.5,
              max_tokens: 1024,
              top_p: 1,
              stream: false,
              stop: null
            }')

          echo "json_payload: $json_payload"

          curl "https://api.groq.com/openai/v1/chat/completions" \
            -X POST \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer ${{ secrets.GROQ_API_KEY }}" \
            -d "$json_payload" \
            -o summarized_changelog.txt

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Install gh-release
        run: |
          npm install https://github.com/Vidalnt/gh-release.git

      - name: Debug output
        run: |
          echo "Tag: ${{ steps.check-version.outputs.tag }}"
          echo "Changelog: $(cat summarized_changelog.txt)"
          echo "Repository: ${{ github.repository }}"

      - name: Publish release using gh-release
        run: |
          tag_name="${{ steps.check-version.outputs.tag }}"
          changelog=$(cat summarized_changelog.txt)
          GH_RELEASE_GITHUB_API_TOKEN=${{ secrets.GITHUB_TOKEN }} npx gh-release \
            -t "${tag_name}" \
            -n "Release ${tag_name}" \
            -c "master" \
            -b "üöÄ Exciting News! Upgrade to the latest and greatest version of Applio, ${tag_name}, now available for download!\n\n### Choose your preferred option:\n- üöÄ Release: [Download Now](https://github.com/${{ github.repository }}/releases/tag/${tag_name})\n- üì¶ Compiled (Just double click it): [.exe](https://huggingface.co/${{ github.repository }}/resolve/main/Compiled/ApplioV${tag_name}.exe) / [.zip](https://huggingface.co/${{ github.repository }}/resolve/main/Compiled/ApplioV${tag_name}.zip?download=true)\n\n### Applio Changelog Highlights:\n${changelog}\n\nWhat features are you hoping to see in our upcoming updates? üîç Stay tuned for more exciting improvements!" \
            -o "${{ github.repository_owner }}" \
            -r "${{ github.repository }}" \
            -d
        env:
          GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"

      - name: Trigger Pre-Compiled and Upload workflow
        uses: actions/github-script@v6
        with:
          script: |
            const octokit = github.getOctokit(process.env.GITHUB_TOKEN);
            await octokit.rest.actions.createWorkflowDispatch({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: 'pre_compiled.yml',
              ref: context.ref,
            });
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
